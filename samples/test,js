const CANAL = require('bindings')('nodecanal');
const can = new CANAL.CNodeCanal();

// var rv;

// const callback = (canmsg) => { 
//   console.log(new Date, canmsg); 
//   if ( canmsg.id == 0x999 ) {
//     console.log('CNodeCanal close : ',can.close());
//     process.exit();
//   }
// };

// console.log('CNodeCanal init : ',
// rv = can.init("/home/akhe/development/VSCP/vscpl1drv-socketcan/linux/vscpl1drv-socketcan.so.1.1.0",
//           "vcan0",
//           0,
//           callback ));
          
// if ( CANAL.CANAL_ERROR_SUCCESS != rv ) {
//   console.log("Failed to initialized CANAL driver. Return code=",rv);
//   process.exit();
// }          

// console.log('CNodeCanal open : ',can.open());

// var hrTime = process.hrtime();
// console.log(hrTime[0] * 1000000 + hrTime[1] / 1000);
    
// console.log('CNodeCanal send : ',
//   can.send(0x2020,0,
//             (hrTime[0] * 1000000 + hrTime[1] / 1000),
//             123,[1,2,3,4,5] ) );     
    
// var hrTime = process.hrtime();
// console.log('CNodeCanal send : ',
// can.send({
//         canid: 0x7f,
//         flags: 0,
//         obid: 33,
//         timestamp: (hrTime[0] * 1000000 + hrTime[1] / 1000),
//         data: [11,22,33,44,55,66,77,88],
//         ext: true,
//         rtr: false
//     }));

// console.log("Version : ", can.getVersion().toString(16));
// console.log("DLL version : ", can.getDllVersion().toString(16));
// console.log("Vendor : ", can.getVendorString());

// console.log("CANAL status : ");
// rv = can.getStatus((status) => {
//   console.log(status);
// });
// console.log("rv="+rv);

// console.log("CANAL statistics : ");
// rv = can.getStatistics((stat) => {
//   console.log(stat);
// });
// console.log("rv="+rv);

// // Some error codes
// console.log("CANAL_ERROR_SUCCESS = ",CANAL.CANAL_ERROR_SUCCESS);
// console.log("CANAL_ERROR_COMMUNICATION = ",CANAL.CANAL_ERROR_COMMUNICATION);

// var brun = true;
// var count;
// while (brun) {
//   if ( count = can.dataAvailable() ) {
//     console.log("count = ", count); 
//     can.receive( (canmsg) => {
//       console.log("Message received:", canmsg)
//     });
//   }
// }    

//console.log('CNodeCanal close : ', can.close());